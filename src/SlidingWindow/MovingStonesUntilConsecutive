//https://leetcode.com/problems/moving-stones-until-consecutive-ii/description/?envType=problem-list-v2&envId=sliding-window

class Solution {
    public int[] numMovesStonesII(int[] stones) {
        Arrays.sort(stones);
        int n = stones.length;

        int max1 = stones[n-2] - stones[0] - (n-2);
        int max2 = stones[n-1] - stones[1] - (n-2);
        int maxMoves = Math.max(max1,max2);

        int minMoves = n ;
        int j = 0;

        for(int i = 0 ; i < n ;i++){
            while(j+1 < n && stones[j+1] - stones[i] + 1 <= n){
                j++;
                int winSize = j-i +1;
                if(winSize == n-1 && stones[j]- stones[i] + 1 == n-1){
                    minMoves = Math.min(minMoves,2);
                }else{
                    minMoves = Math.min(minMoves,n-winSize);
                }
            }
        }


        return new int [] {minMoves,maxMoves};
        
    }
}